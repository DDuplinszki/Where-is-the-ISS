{"version":3,"sources":["ChangeView.js","iss-silhouette.png","Map.js","App.js","reportWebVitals.js","index.js"],"names":["ChangeView","center","useMap","setView","Map","position","zoom","issIcon","L","Icon","iconUrl","iss","iconRetinaUrl","iconAnchor","iconSize","popupAnchor","MapContainer","className","TileLayer","attribution","url","Marker","icon","Popup","App","useState","loading","setLoading","latitude","setLatitude","longitude","setLongitude","useEffect","getData","a","fetch","resp","json","data","console","log","iss_position","locationData","type","color","height","width","timeout","lat","lng","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gSAQeA,EANI,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAGlB,OAFYC,cACRC,QAAQF,GACL,MCLI,MAA0B,2CC+B1BG,MA1Bf,YAAwC,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,KAAML,EAAS,EAATA,OAExBM,EAAU,IAAIC,IAAEC,KAAK,CACvBC,QAASC,EACTC,cAAeD,EACfE,WAAY,CAAC,EAAG,GAChBC,SAAU,CAAC,GAAI,IACfC,YAAa,CAAC,GAAI,KAGpB,OACE,eAACC,EAAA,EAAD,CAAcC,UAAU,mBAAmBhB,OAAQI,EAAUC,KAAMA,EAAnE,UACE,cAAC,EAAD,CAAYL,OAAQA,EAAQK,KAAMA,IAClC,cAACY,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,uDAEN,cAACC,EAAA,EAAD,CAAQhB,SAAUA,EAAUiB,KAAMf,EAAlC,SACE,cAACgB,EAAA,EAAD,sD,yBCkCOC,MAnDf,WAAgB,IAAD,EACiBC,oBAAS,GAD1B,mBACNC,EADM,KACGC,EADH,OAEmBF,mBAAS,GAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGqBJ,mBAAS,GAH9B,mBAGNK,EAHM,KAGKC,EAHL,KAKbC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAO,uCAAG,gCAAAC,EAAA,sEAEZP,GAAW,GAFC,SAGOQ,MAAM,2CAHb,cAGNC,EAHM,gBAIOA,EAAKC,OAJZ,cAINC,EAJM,OAKZC,QAAQC,IAAIF,GALA,UAMe,CAACA,EAAKG,aAAab,SAAUU,EAAKG,aAAaX,WAN9D,QAMNY,EANM,OAOZH,QAAQC,IAAR,0CAA+CE,EAAa,GAA5D,0BAAgFA,EAAa,KAC7Fb,EAAYa,EAAa,IACzBX,EAAaW,EAAa,IAC1Bf,GAAW,GAVC,kDAYZY,QAAQC,IAAI,QAAZ,MAZY,kEAAH,qDAgBb,OACE,sBAAKvB,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,+DAIa,IAAZS,EACD,sBAAKT,UAAU,gBAAf,wBAEE,cAAC,IAAD,CACE0B,KAAK,OACLC,MAAM,UACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,SAIb,8BACE,cAAC,EAAD,CAAK1C,SAAU,CAAE2C,IAAKpB,EAAUqB,IAAKnB,GAAaxB,KAAM,EAAGL,OAAQ,CAAE+C,IAAKpB,EAAUqB,IAAKnB,WCvCpFoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a9b74a0b.chunk.js","sourcesContent":["import { useMap } from 'react-leaflet';\r\n\r\nconst ChangeView = ({ center }) => {\r\n    const map = useMap();\r\n    map.setView(center)\r\n    return null;\r\n};\r\n\r\nexport default ChangeView;","export default __webpack_public_path__ + \"static/media/iss-silhouette.dcb3e8c7.png\";","import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport L from 'leaflet'\r\nimport ChangeView from './ChangeView';\r\nimport iss from './iss-silhouette.png';\r\n\r\nfunction Map({position, zoom, center}) {\r\n\r\n  let issIcon = new L.Icon({\r\n    iconUrl: iss,\r\n    iconRetinaUrl: iss,\r\n    iconAnchor: [0, 0],\r\n    iconSize: [70, 70],\r\n    popupAnchor: [35, 0],\r\n  })\r\n\r\n  return (\r\n    <MapContainer className=\"leafletContainer\" center={position} zoom={zoom}>\r\n      <ChangeView center={center} zoom={zoom}/>\r\n      <TileLayer\r\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n      />\r\n      <Marker position={position} icon={issIcon}>\r\n        <Popup>\r\n          International Space Station (ISS)\r\n        </Popup>\r\n      </Marker>\r\n    </MapContainer>\r\n  )\r\n};\r\n\r\nexport default Map;","import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport Map from './Map';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport Loader from \"react-loader-spinner\";\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n\n  useEffect(() => {    \n    getData();  \n  }, []);\n\n  const getData = async () => {\n    try {\n      setLoading(true);\n      const resp = await fetch('http://api.open-notify.org/iss-now.json');\n      const data = await resp.json();\n      console.log(data);\n      const locationData = await [data.iss_position.latitude, data.iss_position.longitude];\n      console.log(`The ISS is located at: Latitude ${locationData[0]} and Longitude ${locationData[1]}`);\n      setLatitude(locationData[0]);\n      setLongitude(locationData[1]);\n      setLoading(false);\n    } catch (err) {\n      console.log('error', err)\n    }; \n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Where is the ISS currently?\n        </p>\n      </header>\n        {loading === true ?\n        <div className=\"loadingScreen\">\n          Locating...\n          <Loader\n            type=\"Puff\"\n            color=\"#00BFFF\"\n            height={100}\n            width={100}\n            timeout={3000} //3 secs\n          />\n        </div>\n       :\n        <div>\n          <Map position={{ lat: latitude, lng: longitude }} zoom={6} center={{ lat: latitude, lng: longitude }}/>\n        </div>}\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}